# general settings
name: GaussianColorDenoising_SUTNetGanSigma25
model_type: ImageCleanGanModel
scale: 1
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 100

# dataset and data loader settings
datasets:
  train:
    name: TrainSet
    type: Dataset_GaussianDenoising
    sigma_type: constant
    sigma_range: 25
    in_ch: 3    ## RGB image
    dataroot_gt: ../Denoising/Datasets/train/DFWB
    dataroot_lq: none
    geometric_augs: true

    filename_tmpl: '{}'
    io_backend:
      type: disk

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 4
    batch_size_per_gpu: 2

    ### -------------Progressive training--------------------------
    mini_batch_sizes: [2,1,1,1,1,1]             # Batch size per gpu
    iters: [368000,256000,192000,144000,144000,96000]
    gt_size: 192   # Max patch size for progressive training
    gt_sizes: [128,192,192,192,192,192]  # Patch sizes for progressive training.
    ### ------------------------------------------------------------

    ### ------- Training on single fixed-patch size 128x128---------
    # mini_batch_sizes: [8]
    # iters: [300000]
    # gt_size: 128
    # gt_sizes: [128]
    ### ------------------------------------------------------------

    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: ValSet
    type: Dataset_GaussianDenoising
    sigma_test: 25
    in_ch: 3  ## RGB image
    dataroot_gt: ../Denoising/Datasets/test/CBSD68
    dataroot_lq: none
    io_backend:
      type: disk

# network structures
network_g:
  type: SUNet
  inp_channels: 3
  out_channels: 3
  dim: 48
  num_blocks: [4,6,6,8]
  num_refinement_blocks: 4
  heads: [1,2,4,8]
  ffn_expansion_factor: 2.66
  bias: False
  LayerNorm_type: BiasFree
  dual_pixel_task: False

network_d:
  type: patchgan_spectral # "discriminator_vgg_192" | "discriminator_vgg_128" | "discriminator_vgg_96" | patchgan_spectral | "UNetDiscriminatorSN"
  in_nc: 3
  base_nc: 64
  n_layers: 3
  act_mode: BL

  init_type: orthogonal # "orthogonal" | "normal" | "uniform" | "xavier_normal" | "xavier_uniform" | "kaiming_normal" | "kaiming_uniform"
  init_bn_type: uniform # "uniform" | "constant"
  init_gain: 0.2


# path
path:
  pretrain_network_g: ~
    strict_load_g: true
    resume_state: ~


# training settings
train:
  total_iter: 1200000
  warmup_iter: -1 # no warm up
  use_grad_clip: false

  # Split 300k iterations into two cycles.
  # 1st cycle: fixed 3e-4 LR for 92k iters.
  # 2nd cycle: cosine annealing (3e-4 to 1e-6) for 208k iters.
  scheduler:
    type: CosineAnnealingRestartCyclicLR
    periods: [368000, 832000] # [92000, 127000, 308000]
    restart_weights: [1,1]
    eta_mins: [0.00001,0.000001]
  
  mixing_augs:
    mixup: true
    mixup_beta: 1.2
    use_identity: true

  optim_g:
    type: AdamW
    lr: !!float 1e-5
    weight_decay: !!float 1e-4
    betas: [0.9, 0.999]

  optim_d:
    type: AdamW
    lr: !!float 3e-4
    weight_decay: !!float 1e-4
    betas: [ 0.9, 0.999 ]

  # losses
  # G_loss
  pixel_opt:
    type: L1Loss
    loss_weight: 1
    reduction: mean
  # D_loss
  d_opt:
    type: GANLoss
    gan_type: gan    # "gan" | "ragan" | "wgan" | "softplusgan"
    loss_weight: 0.1
    real_label_val: 1.0
    fake_label_val: 0.0

# validation settings
val:
  window_size: 8
  val_freq: !!float 4e3
  save_img: false
  rgb2bgr: true
  use_image: false
  max_minibatch: 8

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false

# logging settings
logger:
  print_freq: 1000
  save_checkpoint_freq: !!float 4e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
